# Dockerfile.java-distroless (üîí S√âCURIT√â MAXIMALE - Java distroless Debian 12)
# Ce Dockerfile utilise une image distroless Java Debian 12 pour une s√©curit√© maximale

# ===================================
# √âTAPE 1 : BUILD S√âCURIS√â AVEC MAVEN
# ===================================
FROM maven:3.9.9-eclipse-temurin-21 AS builder

# D√©finir le r√©pertoire de travail
WORKDIR /app

# Copier le POM pour optimiser le cache des d√©pendances
COPY pom.xml ./

# T√©l√©charger les d√©pendances avec cache s√©curis√©
RUN mvn dependency:go-offline -B --batch-mode --no-transfer-progress

# Copier le code source
COPY src ./src

# Build de l'application avec s√©curit√© renforc√©e
RUN mvn clean package -DskipTests -B --batch-mode --no-transfer-progress \
    -Dmaven.test.skip=true \
    -Dmaven.javadoc.skip=true \
    -Dmaven.source.skip=true

# ===================================
# √âTAPE 2 : JRE DISTROLESS DEBIAN 12
# ===================================
FROM gcr.io/distroless/java21-debian12

# D√©finir le r√©pertoire de travail
WORKDIR /app

# Copier uniquement le JAR depuis le builder
COPY --from=builder /app/target/*.jar /app/application.jar

# Exposer le port
EXPOSE 8080

# Lancer l'application avec JRE distroless
# L'image distroless ne contient que le JRE, pas de JDK, Maven, ou shell
CMD ["application.jar"]

# Avantages de l'image distroless Java :
# 1. Surface d'attaque minimale (pas de shell, Maven, etc.)
# 2. Taille r√©duite (seulement le JRE, pas le JDK complet)
# 3. S√©curit√© renforc√©e (impossible d'ex√©cuter des commandes)
# 4. Pas de build tools en production
# 5. Impossibilit√© d'installer des outils malveillants
# 6. Conformit√© aux standards de s√©curit√©
# 7. Optimisation pour la production (pas de compilateur)
